// Modified CPU Components for New Instructions
// Analogous to neural pathway modification for new skill acquisition

// PC Control Logic (X2) - Similar to attention shifting mechanisms
module PC_Control (
    input wire clk,
    input wire rst,
    input wire jump_en,
    input wire [3:0] ra_value,
    input wire [3:0] rb_value,
    output reg [3:0] pc
);
    wire [3:0] next_pc;
    wire [3:0] jump_target = ra_value + rb_value;
    
    // Decision pathway selection
    assign next_pc = jump_en ? jump_target : (pc + 1);
    
    always @(posedge clk or posedge rst) begin
        if (rst)
            pc <= 4'b0000;
        else
            pc <= next_pc;
    end
endmodule

// Register File (X3) - Working memory analog
module RegisterFile (
    input wire clk,
    input wire rst,
    input wire reg_write,
    input wire imm_load,
    input wire [1:0] ra_addr,
    input wire [1:0] rb_addr,
    input wire [1:0] write_addr,
    input wire [3:0] write_data,
    input wire [3:0] immediate,
    output wire [3:0] ra_data,
    output wire [3:0] rb_data
);
    reg [3:0] registers[0:3];
    
    // Write-back pathway (motor learning analog)
    always @(posedge clk) begin
        if (rst) begin
            registers[0] <= 0;
            registers[1] <= 0;
            registers[2] <= 0;
            registers[3] <= 0;
        end
        else if (reg_write)
            registers[write_addr] <= imm_load ? immediate : write_data;
    end
    
    assign ra_data = registers[ra_addr];
    assign rb_data = registers[rb_addr];
endmodule

// Control Unit - Executive function analog
module ControlUnit (
    input wire [1:0] opcode,
    output reg jump_en,
    output reg imm_load,
    output reg reg_write,
    output reg alu_bypass
);
    parameter LOAD_IMM = 2'b11;
    parameter JUMP = 2'b10;
    
    always @(*) begin
        // Default state (resting state)
        jump_en = 0;
        imm_load = 0;
        reg_write = 0;
        alu_bypass = 0;
        
        case(opcode)
            LOAD_IMM: begin
                imm_load = 1;
                reg_write = 1;
                alu_bypass = 1;
            end
            JUMP: begin
                jump_en = 1;
                alu_bypass = 1;
            end
        endcase
    end
endmodule
